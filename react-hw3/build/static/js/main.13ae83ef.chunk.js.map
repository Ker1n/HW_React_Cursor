{"version":3,"sources":["components/countdownTimer/countdownTimer.js","App.js","serviceWorker.js","index.js"],"names":["CountdownTimer","props","start","state","isActive","console","log","myInterval","setInterval","setState","prevState","count","step","myIntervalWidth","width","time","stop","clearInterval","reset","this","interval","doIntervalChange","className","style","Button","variant","size","color","onClick","Component","countdownTimers","App","map","timerData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.13ae83ef.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './countdownTimer.css'\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nclass CountdownTimer  extends Component  { \r\n    constructor (props) { \r\n        super(props)\r\n        this.state = { \r\n            count: props.time,\r\n            isActive: false,\r\n            width : props.width\r\n        }\r\n    } \r\n\r\n    componentDidMount() {    \r\n     console.log(\"Таймер запущено!\")\r\n      this.interval =  this.doIntervalChange ();\r\n    };\r\n\r\n    doIntervalChange () { \r\n        this.myInterval = setInterval(() => {\r\n            this.setState (prevState => ({ \r\n                count: (prevState.count !==0) ? prevState.count - this.props.step : prevState.count = 0\r\n            }))\r\n        }, (this.props.step * 1000 ))\r\n        this.myIntervalWidth = setInterval(() => { \r\n            this.setState((prevState)=> ({ \r\n               width : (prevState.width - ((this.props.width  / this.props.time )/10)) \r\n            }))\r\n        },100)\r\n    }   \r\n     \r\n    start = () => {    \r\n        if (this.state.isActive) {\r\n            console.log(\"Таймер запущено!\")\r\n            this.myInterval = setInterval(() => {\r\n                this.setState (prevState => ({ \r\n                    count: (prevState.count !==0) ? prevState.count - this.props.step : (prevState.count = 0 ) \r\n                }))\r\n            }, 1000);\r\n            this.myIntervalWidth = setInterval(() => { \r\n                this.setState((prevState)=> ({ \r\n                   width : (prevState.width - ((this.props.width  / this.props.time )/10)) \r\n                }))\r\n            },100)\r\n        }\r\n        this.setState({ \r\n            isActive: false,\r\n        })  \r\n          \r\n    }\r\n\r\n    stop = () => { \r\n        console.log(\"Таймер на паузі!\")\r\n        clearInterval(this.myInterval)\r\n        clearInterval(this.myIntervalWidth)\r\n        this.setState({ \r\n            isActive: true,\r\n        })\r\n    }\r\n\r\n    reset = () => { \r\n        this.setState({ \r\n            count: this.props.time,\r\n            isActive: false,\r\n            width : this.props.width\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"countdownTimer-wrapper\">\r\n                <div className=\"countdownTimer-container\">\r\n                    <div className=\"countdownTimer-head\">\r\n                       <div className=\"timer-title\">Current Timer: {this.state.count} s</div> \r\n                        <div className=\"line-wrapper\" style={{width: this.props.width + 2}}></div><div className=\"timer-line\" style={{width: this.state.width}}></div>\r\n                    </div>\r\n                    <div className=\"btn-row\">\r\n                    <div className=\"btn-controlPanel\">\r\n                        {this.state.isActive ? \r\n                         <Button variant=\"contained\" size=\"small\" color=\"primary\" onClick={this.start}>Start</Button>\r\n                        :<Button variant=\"contained\" size=\"small\" color=\"primary\" onClick={this.stop}>Stop</Button>}\r\n                    </div>\r\n                    <div className=\"btn-reset\">\r\n                        <Button variant=\"contained\"  size=\"small\" color=\"primary\" onClick = {this.reset}>Reset</Button>\r\n                    </div>\r\n                    </div>\r\n                </div>               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default CountdownTimer","import React from 'react';\nimport CountdownTimer from './components/countdownTimer/countdownTimer';\n\nconst countdownTimers = [{\n  time: 15,/*count in sec*/ \n  width: 300,\n  step: 1 /*steps in sec*/\n}, {\n  time: 30,\n  width: 300,\n  step: 2\n}, {\n  time: 150,\n  width: 300,\n  step: 5\n}];\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <div className=\"countdownTimer-wrapper\">\n      {countdownTimers.map((timerData) => ( \n        <CountdownTimer  {...timerData}  />\n      ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}